package com.tgh.dnswizard.bean;

import java.util.List;
import com.tgh.dnswizard.bean.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PROVINCE.
 */
public class Province implements DisplayText{

    private Long id;
    /** Not-null value. */
    private String text;
    private Long ispId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProvinceDao myDao;

    private ISP iSP;
    private Long iSP__resolvedKey;

    private List<City> cities;

    public Province() {
    }

    public Province(Long id) {
        this.id = id;
    }

    public Province(Long id, String text, Long ispId) {
        this.id = id;
        this.text = text;
        this.ispId = ispId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProvinceDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getText() {
        return text;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setText(String text) {
        this.text = text;
    }

    public Long getIspId() {
        return ispId;
    }

    public void setIspId(Long ispId) {
        this.ispId = ispId;
    }

    /** To-one relationship, resolved on first access. */
    public ISP getISP() {
        Long __key = this.ispId;
        if (iSP__resolvedKey == null || !iSP__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ISPDao targetDao = daoSession.getISPDao();
            ISP iSPNew = targetDao.load(__key);
            synchronized (this) {
                iSP = iSPNew;
            	iSP__resolvedKey = __key;
            }
        }
        return iSP;
    }

    public void setISP(ISP iSP) {
        synchronized (this) {
            this.iSP = iSP;
            ispId = iSP == null ? null : iSP.getId();
            iSP__resolvedKey = ispId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<City> getCities() {
        if (cities == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CityDao targetDao = daoSession.getCityDao();
            List<City> citiesNew = targetDao._queryProvince_Cities(id);
            synchronized (this) {
                if(cities == null) {
                    cities = citiesNew;
                }
            }
        }
        return cities;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCities() {
        cities = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Province province = (Province) o;

        if (!id.equals(province.id)) return false;
        if (!ispId.equals(province.ispId)) return false;
        if (!text.equals(province.text)) return false;

        return true;
    }

    @Override
    public int hashCode() {
        int result = id.hashCode();
        result = 31 * result + text.hashCode();
        result = 31 * result + ispId.hashCode();
        return result;
    }

    @Override
    public String toString() {
        return text;
    }

    @Override
    public String getDisplayText() {
        return text;
    }
}
